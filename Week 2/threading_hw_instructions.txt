This assignment asks you to create a Bank class which employs a number of tellers.
The tellers all work in parallel to accept customers from a queue and process their transactions.
Everything, except for a few user defined exceptions, will be contained within the bank class.

You will need to employ a few libraries to make this work, so go read the docs!!
You will need to use threads, a lock, and a queue.

This homework is a little different from Hackerrank in that we are utilizing the unittest
library to test your code. This library is pretty robust, but you don't necessarily need
to know how it works to finish the homework. My recommendation is that you run the file
without doing any coding first to see what's produced. Then, I would suggest you go
through the test cases sequentially and write the minimum amount of code to pass each test.
For the most part, each test builds on the previous test, so you can't go too wrong by taking
this iterative approach.

I won't lie. Even though the solution can be done in about 50 lines of code, this will be a little
challenging for most of you. That is by design. I want you to experiment with creating and running
threads so that you fail and learn. But don't worry! We can talk about where you have problems.

I have included an additional file to help you along the process. It utilizes the logging library.
You can add logs to your code to help you, and when you run this file, threading_hw_helper,
you will get an output to the console. The reason it's good to use logs here over print is because
the logging library is thread-safe where the print statement is not.

Finally, there is one bug that I can't fix right now. It has to do with the unittest library.
I am finding that my solution passes all the test cases but for some strange reason the module
won't exit upon completion unless you terminate the program manually. It's no big deal; it won't
affect you.
